import Head from "next/head";
import { Inter } from "@next/font/google";
import { useCallback, useEffect } from "react";
import ReactFlow, {
   MiniMap,
   Controls,
   Background,
   useNodesState,
   useEdgesState,
   addEdge,
   useReactFlow,
   ReactFlowProvider,
} from "reactflow";
// 👇 you need to import the reactflow styles
import "reactflow/dist/style.css";
import ESP32_NODE from "@/components/nodes/esp32";
import useSWR from "swr";

const initialNodes = [
   { id: "base", position: { x: 300, y: 550 }, data: { label: "🏠 Base" } },
   {
      id: "2",
      position: { x: 0, y: 300 },
      data: { label: 2, status: "healthy" },
      type: "ESP32",
   },
   {
      id: "3",
      position: { x: 0, y: 675 },
      data: { label: 3, status: "healthy" },
      type: "ESP32",
   },
   {
      id: "4",
      position: { x: 600, y: 300 },
      data: { label: 4, status: "healthy" },
      type: "ESP32",
   },
   {
      id: "5",
      position: { x: 600, y: 675 },
      data: { label: 5, status: "alert" },
      type: "ESP32",
   },
];

const initialEdges = [
   { id: "e2-1", source: "2", target: "base" },
   { id: "e4-1", source: "4", target: "base" },
   { id: "e3-1", source: "base", target: "3" },
   { id: "e5-1", source: "base", target: "5" },
];

const nodeTypes = { ESP32: ESP32_NODE };

const getLogsFetcher = (url) =>
   fetch(url, {
      method: "GET",
      headers: {
         "Content-Type": "application/json",
      },
   }).then((res) => res.json());

export default function Home() {
   return (
      <>
         <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <meta
               name="viewport"
               content="width=device-width, initial-scale=1"
            />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <main style={{ background: "white", height: "100vh", width: "100vw" }}>
            <div className="flex w-full bg-white justify-between px-4 border-b-2">
               <div className="text-black py-4">
                  <div className="font-medium text-lg bg-white inline px-2 py-2 rounded-md">
                     Kathmandu - Smart lifevests v1.0
                  </div>
               </div>
               <div className="text-black  flex items-center">
                  <div>Modus:</div>
                  <div className="bg-white px-2 py-2 rounded-md space-x-2">
                     <div className="font-semibold text-md bg-gray-100 py-2 px-3 text-black inline rounded-md border-gray-300 border-2">
                        <a href="/stats"> Live</a>
                     </div>
                     <div className="font-medium text-md bg-gray-100 py-2 px-3 text-black inline rounded-md">
                        <a href="/stats"> Stats</a>
                     </div>
                  </div>
               </div>
            </div>
            <ReactFlowProvider>
               <Flow />
            </ReactFlowProvider>
         </main>
      </>
   );
}

export function Flow() {
   const [nodes, setNodes, onNodesChange] = useNodesState([]);
   const [edges, setEdges, onEdgesChange] = useEdgesState([]);
   const { data, error } = useSWR("/api/logs", getLogsFetcher);

   const onConnect = useCallback(
      (params) => setEdges((eds) => addEdge(params, eds)),
      [setEdges]
   );

   const flow = useReactFlow();

   useEffect(() => {
      flow.setCenter(0, 0);
   }, []);

   useEffect(() => {
      console.log(data);
      if (data) {
         const nodes = Object.keys(data);
         setNodes(() => {
            const items = nodes.map((node, key) => {
               return {
                  id: node,
                  position: { x: 300 * key, y: 0 * key },
                  data: {
                     label: node,
                     status: "healthy",
                     temp: data?.[node]?.[0]?.["temperature"],
                     humidity: data?.[node]?.[0]?.["humidity"],
                     pressure: data?.[node]?.[0]?.["pressure"],
                     lastLoggedAt: data?.[node]?.[0]?.["loggedAt"],
                  },
                  type: "ESP32",
               };
            });
            items.push({
               id: "base",
               position: { x: nodes.length * 130, y: 550 },
               data: { label: "🏠 Base" },
            });
            return items;
         });
         setEdges(() => {
            return nodes.map((data, key) => {
               return { id: `base-${key}`, source: data, target: "base" };
            });
         });
      }
   }, [data]);

   return (
      <ReactFlowProvider>
         <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            fitView
            style={{
               backgroundColor: "#f8fafc",
               maxHeight: "calc(100vh - 64px)",
            }}
            nodeTypes={nodeTypes}
         >
            <MiniMap />
            <Controls />
            <Background />
         </ReactFlow>
      </ReactFlowProvider>
   );
}
